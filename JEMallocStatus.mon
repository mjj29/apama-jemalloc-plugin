/**
 * Title:        JEMallocStatus.mon
 * Description:  Provide status lines with Jemalloc and platform stats
 * Copyright (c) 2020 Software AG, Darmstadt, Germany andor its licensors
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the License at
 * http:/www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.
 * See the License for the specific language governing permissions and limitations under the License.
 */

package com.apamax;

using com.apama.correlator.Component;

/**
 * Log a status line periodically containing assorted memory statistics.
 *
 * You must set one or more of the following environment variables:
<ul>
<li><tt>AP_ALLOCATOR=jemalloc</tt> - enable the JEmalloc allocator</li>
<li><tt>AP_TRACKMEMORY=true</tt> - track stats for the platform allocator</li>
</ul>
 *
 * The status line can be configured via two correlator properties:
<ul>
<li><tt>MEMORY_STATUS_INTERVAL_SECS</tt> - the number of seconds between printing each status line (default: 5)</li>
<li><tt>MEMORY_STATUS_TEMP_FILE</tt> - the temporary file to use for gathering stats for the platform allocator (default: /tmp/JEMallocStats.tmp.file.txt)</li>
</ul>
 */
monitor JEMallocStats
{
	/** @private */
	boolean jemallocEnabled;
	/** @private */
	boolean memoryTrackEnabled;
	/** @private */
	float STATUS_INTERVAL_SECS := 5.0;
	/** @private */
	string STATS_TMP_FILE := "/tmp/JEMallocStats.tmp.file.txt";

	/** Start the status line and read the configuration. Status lines writing is spawned to its own private context. */
	action onload()
	{
		dictionary<string, string> envp := Component.getInfo("envp");
		jemallocEnabled := "jemalloc" = envp.getOr("AP_ALLOCATOR", "");
		memoryTrackEnabled := envp.hasKey("AP_TRACKMEMORY");
		dictionary<string, string> props := Component.getConfigProperties();
		STATUS_INTERVAL_SECS := float.parse(props.getOr("MEMORY_STATUS_INTERVAL_SECS", STATUS_INTERVAL_SECS.toString()));
		STATS_TMP_FILE := props.getOr("MEMORY_STATUS_TEMP_FILE", STATS_TMP_FILE);
		if (jemallocEnabled or memoryTrackEnabled) {
			log "Starting memory status thread" at INFO;
			spawn logStats() to context("JEMallocStatsContext");
		} else {
			log "No memory stats available, not logging. Set either or both of AP_TRACKMEMORY=true or AP_ALLOCATOR=jemalloc before starting the correlator." at INFO;
		}
	}

	/** Run the loop to log the status line. */
	action logStats()
	{
		on all wait(STATUS_INTERVAL_SECS) {
			string statusLine := "Memory Status:";

			if (jemallocEnabled) {
				// update JEMalloc counters to current
				JEMalloc.updateCounters(); 

				// get the data
				integer res := JEMalloc.getResidentBytes();
				integer act := JEMalloc.getActiveBytes();
				integer alloc := JEMalloc.getAllocatedBytes();
				integer map := JEMalloc.getMappedBytes();
				integer ret := JEMalloc.getRetainedBytes();

				// build the status line
				statusLine := statusLine + " jeres="+(res/1024).toString();
				statusLine := statusLine + " jeact="+(act/1024).toString();
				statusLine := statusLine + " jeall="+(alloc/1024).toString();
				statusLine := statusLine + " jemap="+(map/1024).toString();
				statusLine := statusLine + " jeret="+(ret/1024).toString();

				// efficiency is the percentage of memory actually used and not fragmentized
				statusLine := statusLine + " jeefficiency="+(100.0*alloc.toFloat()/integer.max(res, map).toFloat()).formatFixed(0)+"%";
			}
			
			if (memoryTrackEnabled) {
				// get the stats
				string ignore := Component.management.syncRequestSeq("malloc_stats", [STATS_TMP_FILE]);
				string stats := JEMalloc.plugin.readfile(STATS_TMP_FILE);

				integer current := 0;
				integer max := 0;
				integer total := 0;
				integer system := 0;
				integer inuse := 0;

				// parse the stats we care about from the malloc_stats output
				string line;
				for line in "\n".split(stats) {
					if line.find("system bytes") >= 0 {
						system := integer.parse("=".split(line)[1].ltrim());
					}
					if line.find("in use bytes") >= 0 {
						inuse := integer.parse("=".split(line)[1].ltrim());
					}
					if line.find("<system type=\"current\"") >= 0 {
						current := integer.parse("\"".split(line)[3].ltrim());
					}
					if line.find("<system type=\"max\"") >= 0 {
						max := integer.parse("\"".split(line)[3].ltrim());
					}
					if line.find("<system type=\"total\"") >= 0 {
						total := integer.parse("\"".split(line)[3].ltrim());
					}
				}

				// build the status line
				statusLine := statusLine + " sys="+(system/1024).toString();
				statusLine := statusLine + " use="+(inuse/1024).toString();
				statusLine := statusLine + " max="+(max/1024).toString();
				statusLine := statusLine + " tot="+(total/1024).toString();

				// efficiency is the percentage of memory actually used and not fragmentized
				statusLine := statusLine + " efficiency="+(100.0*inuse.toFloat()/current.toFloat()).formatFixed(0)+"%";
			}

			// log the final status line
			log statusLine at INFO;
		}
	}
}
